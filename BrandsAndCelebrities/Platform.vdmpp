class Platform
types
-- TODO Define types here
values
-- TODO Define values here

	public Activity = {<Embassador>, <Sponsor>,<Entertainer>}
	
instance variables
-- TODO Define instance variables here
	public celebrities : seq of Celebrity := [];
	public agencies : seq of Agency := [];
operations
-- TODO Define operations here
	public Platform : () ==> Platform
	Platform() == return self;
	
	public getCelebsWithActivity : Activity ==> seq of Celebrity
	getCelebsWithActivity(act) == (
		dcl i: int;
		dcl j: int;
		dcl celebs: seq of Celebrity := [];
		for i = 1 to len celebrities do (
			for j = 1 to len celebrities(i).getActivities() do (
			if celebrities(i).getActivities()(j).name = act.name
				then celebs := celebs ^ [celebrities(i)] ;
		);
		);
		return celebs
	);
	
		
	public getAgencyByName : seq1 of char ==> Agency
	getAgencyByName(name) == (
		dcl a: Agency;
		dcl i:int;		
		for i = 1 to len agencies do (
			if agencies(i).name = name
			then return agencies(i);
		);
		return a
	);
	
	
	public addCelebrity : Celebrity ==> ()
	addCelebrity(c) == (
	celebrities := celebrities ^ [c]
	)
	pre c not in set elems celebrities
	post c in set elems celebrities and len celebrities = len celebrities~ + 1;
	
	public addAgency : Agency ==> ()
	addAgency(a) == agencies := agencies ^ [a]
	pre a not in set elems agencies
	post a in set elems agencies and len agencies = len agencies~ + 1;
	
	public getCelebrities : () ==> seq of Celebrity
	getCelebrities() == return celebrities;
	
	public getAgencies : () ==> seq of Agency
	getAgencies() == return agencies;
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Platform