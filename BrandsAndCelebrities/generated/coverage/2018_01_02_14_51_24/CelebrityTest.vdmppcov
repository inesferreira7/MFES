class CelebrityTest
types

values

instance variables
	
	act : Activity := new Activity("test");
	s : Setor := new Setor("Techonology");
	s1 : Setor := new Setor("Nutrition");
	c : Celebrity := new Celebrity("Test Celebrity", 35, [s]);
	
operations
	private assertTrue: bool ==> ()
	assertTrue(cond) == return
	pre cond;
	
	private testAddActivity: () ==> ()
	testAddActivity() == (
	 IO`print("\nTesting add activity to celebrity...\n");
	 c.addActivity(act);
	 assertTrue(c.getActivities() = [act]);
	 assertTrue(c.hasActivity("test") = true);
	 assertTrue(c.hasActivity("test2") = false);
	);
	
	private testAddSetor: () ==> ()
	testAddSetor() == (
	 IO`print("\nTesting add setor to celebrity...\n");
	 c.addSetor(s1);
	 assertTrue(c.getSetors() = [s,s1]);
	);
	
	
	private testGets: () ==> ()
	testGets() == (
		IO`print("\nTesting get functions...\n");
		
		assertTrue(c.getActivities() = []);
		assertTrue(c.getRating() > 0 and c.getRating() <6);
		assertTrue(c.getPrice() = 35);
	);

	public static runTests: () ==> ()
	runTests() == (
		IO`print("*** Running Celebrity tests ***\n");
		new CelebrityTest().testGets();
		new CelebrityTest().testAddActivity();
		new CelebrityTest().testAddSetor();
	)

functions

traces
-- TODO Define Combinatorial Test Traces here
end CelebrityTest