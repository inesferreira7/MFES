class PlatformTest
types

values

instance variables
 	p: Platform:= new Platform();
 	s1 : Setor := new Setor("Techonology");
 	c: Celebrity:= new Celebrity("cel1", 80,[s1]);
 	c2: Celebrity:= new Celebrity("cel2", 90,[s1]);
 	a: Agency:= new Agency("ag1");
 	act: Activity:= new Activity("Sponsor");
 	act2: Activity:= new Activity("Entertainer");
 	s: Service:= new Service(act2);
 	
operations

	private assertTrue: bool ==> ()
	assertTrue(cond) == return
	pre cond;
	
		private testGets: () ==> ()
	testGets() == (
		IO`print("\nTesting get functions...\n");
		assertTrue(p.getCelebrities() = []);
	);
	
		private testAddCelebrity: () ==> ()
		testAddCelebrity() == (
	 	IO`print("\nTesting add celebrity to platform...\n");
	 	p.addCelebrity(c);
	 	assertTrue(p.getCelebrities() = [c]);
	 	assertTrue(p.celebrityExists("cel1") = true);
	);
	
	private testAddAgency: () ==> ()
		testAddAgency() == (
	 	IO`print("\nTesting add agency to platform...\n");
	 	p.addAgency(a);
	 	assertTrue(p.getAgencies() = [a]);
	 	assertTrue(p.agencyExists("ag1") = true);
	);
	
	private testAgencyByName: () ==> ()
	testAgencyByName() == (
		p.addAgency(a);
		IO`print("\nTesting get agency by name \n");
		assertTrue(p.getAgencyByName("ag1") = a);
	);
	
	private testCelebrityByName: () ==> ()
	testCelebrityByName() == (
		p.addCelebrity(c);
		IO`print("\nTesting get celebrity by name \n");
		assertTrue(p.getCelebrityByName("cel1") = c);
	);
	
	private testCelebritiesByPrice: () ==> ()
	testCelebritiesByPrice() == (
		p.addCelebrity(c);
		p.addCelebrity(c2);
		IO`print("\nTesting get celebrities with limit of price \n");
		assertTrue(p.getCelebritiesByPrice(85) = [c]);
	);
	
	private testCelebritiesByRating: () ==> ()
	testCelebritiesByRating() == (
		c.setRating(3);
		c2.setRating(5);
		p.addCelebrity(c);
		p.addCelebrity(c2);
		IO`print("\nTesting get celebrities with minimum of rating \n");
		assertTrue(p.getCelebritiesByRating(4) = [c2]);
	);
	
	private testCelebsWithActivityAndSetor: () ==> ()
		testCelebsWithActivityAndSetor() == (
		IO`print("\nTesting get celebrities with given activity and setor\n");
		c.addActivity(act);
		c2.addActivity(act2);
		p.addCelebrity(c);
		p.addCelebrity(c2);
		assertTrue(p.getCelebsWithActivityAndSetor(act,s1) = elems [c]);
		);
		
		private testRemoveActivity: () ==> ()
		testRemoveActivity() == (
		IO`print("\nTesting remove activity from celebrity \n");
		c.addActivity(act);
		c.addActivity(act2);
		p.addCelebrity(c);
		
		s.addCelebrity(c);
		a.addService(s);
		p.addAgency(a);
		
		assertTrue(c.getActivities() = [act,act2]);
		assertTrue(s.getCelebrities() = [c]);
		
		p.removeActivityFromCelebrity(c, act);
		
		assertTrue(c.getActivities() = [act2]);
		assertTrue(s.getCelebrities() = []);
		
		);
		
		private testCelebContracts: () ==> ()
		testCelebContracts() == (
		IO`print("\n Testing get celebrity contracts \n");
		c.addActivity(act2);
		s.addCelebrity(c);
		a.addService(s);
		p.addAgency(a);
		
		assertTrue(p.getCelebrityContracts(c) = [a]);
		);
		
	
	public static runTests: () ==> ()
	runTests() == (
		IO`print("*** Running Platform tests ***\n");
		new PlatformTest().testGets();
		new PlatformTest().testAddCelebrity();
		new PlatformTest().testAddAgency();
		new PlatformTest().testAgencyByName();
		new PlatformTest().testCelebrityByName();
		new PlatformTest().testCelebritiesByPrice();
		new PlatformTest().testCelebritiesByRating();
		new PlatformTest().testCelebsWithActivityAndSetor();
		new PlatformTest().testRemoveActivity();
		new PlatformTest().testCelebContracts();
	)
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end PlatformTest

